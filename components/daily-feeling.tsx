"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { CheckCircle } from "lucide-react"

interface DailyFeelingProps {
  onSubmit: (mood: any) => void
}

const moods = [
  { emoji: "üò¢", label: "–ú–Ω–æ–≥—É –¢–∞–∂–Ω–æ", value: 1, color: "text-red-500" },
  { emoji: "üòî", label: "–¢–∞–∂–Ω–æ", value: 2, color: "text-orange-500" },
  { emoji: "üòê", label: "–ù–µ—É—Ç—Ä–∞–ª–Ω–æ", value: 3, color: "text-gray-500" },
  { emoji: "üòä", label: "–°—Ä–µ—ú–Ω–æ", value: 4, color: "text-green-500" },
  { emoji: "üòÑ", label: "–ú–Ω–æ–≥—É –°—Ä–µ—ú–Ω–æ", value: 5, color: "text-blue-500" },
]

export function DailyFeeling({ onSubmit }: DailyFeelingProps) {
  const [selectedMood, setSelectedMood] = useState<number | null>(null)
  const [notes, setNotes] = useState("")
  const [isSubmitted, setIsSubmitted] = useState(false)

  const handleSubmit = () => {
    if (selectedMood !== null) {
      const moodData = {
        mood: moods.find((m) => m.value === selectedMood)?.label,
        value: selectedMood,
        notes,
        date: new Date().toLocaleDateString(),
        timestamp: new Date().toISOString(),
      }
      onSubmit(moodData)
      setIsSubmitted(true)
    }
  }

  if (isSubmitted) {
    return (
        <div className="max-w-2xl mx-auto">
          <Card>
            <CardContent className="pt-6 text-center">
              <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
              <h2 className="text-2xl font-bold mb-2">–¢–≤–æ–µ—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ –∑–∞—á—É–≤–∞–Ω–æ!</h2>
              <p className="text-muted-foreground mb-4">
                –¢–∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º–µ —à—Ç–æ —Å–ø–æ–¥–µ–ª–∏ —Å–æ –Ω–∞—Å –∫–∞–∫–æ —Å–µ —á—É—Å—Ç–≤—É–≤–∞—à –¥–µ–Ω–µ—Å. –¢–≤–æ—ò–æ—Ç –æ–¥–≥–æ–≤–æ—Ä –µ –∑–∞—á—É–≤–∞–Ω –∏ –Ω–∏ –ø–æ–º–∞–≥–∞ –¥–∞ —ò–∞ —Å–ª–µ–¥–∏–º–µ —Ç–≤–æ—ò–∞—Ç–∞ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∞ —Å–æ—Å—Ç–æ—ò–±–∞ —Å–æ —Ç–µ–∫–æ—Ç –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ.
              </p>
              <Button
                  onClick={() => {
                    setIsSubmitted(false)
                    setSelectedMood(null)
                    setNotes("")
                  }}
              >
                –°–º–µ–Ω–∏ –≥–æ –¥–µ–Ω–µ—à–Ω–æ—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ!

              </Button>
            </CardContent>
          </Card>
        </div>
    )
  }

  return (
      <div className="max-w-2xl mx-auto space-y-6">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">–î–Ω–µ–≤–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ—Ç–æ</h1>
          <p className="text-muted-foreground">–ö–∞–∫–æ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞—à –¥–µ–Ω–µ—Å? –¢–≤–æ—ò–∞—Ç–∞ –µ–º–æ—Ü–∏–æ–Ω–∞–ª–Ω–∞ —Å–æ—Å—Ç–æ—ò–±–∞ –µ –≤–∞–∂–Ω–∞.</p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>–°–µ–ª–µ–∫—Ç–∏—Ä–∞—ò –≥–æ —Ç–≤–æ–µ—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</CardTitle>
            <CardDescription>–ò–∑–±–µ—Ä–∏ –≥–æ –µ–º–æ—Ç–∏–∫–æ–Ω–æ—Ç —à—Ç–æ –Ω–∞—ò–¥–æ–±—Ä–æ –≥–æ –ø—Ä–µ—Ç—Å—Ç–∞–≤—É–≤–∞ —Ç–≤–æ–µ—Ç–æ —á—É–≤—Å—Ç–≤–æ –≤–æ –º–æ–º–µ–Ω—Ç–æ–≤</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-5 gap-4">
              {moods.map((mood) => (
                  <button
                      key={mood.value}
                      onClick={() => setSelectedMood(mood.value)}
                      className={`p-4 rounded-lg border-2 transition-all hover:scale-105 ${
                          selectedMood === mood.value ? "border-primary bg-primary/10" : "border-gray-200 hover:border-gray-300"
                      }`}
                  >
                    <div className="text-4xl mb-2">{mood.emoji}</div>
                    <div className={`text-sm font-medium ${mood.color}`}>{mood.label}</div>
                  </button>
              ))}
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –∑–∞–±–µ–ª–µ—à–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)</Label>
              <Textarea
                  id="notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="–®—Ç–æ –ø—Ä–∏–¥–æ–Ω–µ—Å–µ –¥–∞ —Å–µ —á—É–≤—Å—Ç–≤—É–≤–∞—à –≤–∞–∫–∞ –¥–µ–Ω–µ—Å? –ù–µ–∫–æ—ò —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –º–æ–º–µ–Ω—Ç –∏–ª–∏ –Ω–∞—Å—Ç–∞–Ω?"
                  className="min-h-[100px]"
              />
            </div>

            <Button onClick={handleSubmit} disabled={selectedMood === null} className="w-full">
              –ó–∞–±–µ–ª–µ–∂–µ—Ç–µ –≥–æ –º–æ–µ—Ç–æ —á—É–≤—Å—Ç–≤–æ
            </Button>
          </CardContent>
        </Card>

        {selectedMood !== null && (
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="text-6xl mb-2">{moods.find((m) => m.value === selectedMood)?.emoji}</div>
                  <p className="text-lg font-medium">
                    –°–µ —á—É–≤—Å—Ç–≤—É–≤–∞—à {moods.find((m) => m.value === selectedMood)?.label.toLowerCase()} –¥–µ–Ω–µ—Å
                  </p>
                  <p className="text-sm text-muted-foreground mt-2">
                    –ù–µ –∑–∞–±–æ—Ä–∞–≤–∞—ò, –≤–æ —Ä–µ–¥ –µ –¥–∞ –∏–º–∞—à —Ä–∞–∑–ª–∏—á–Ω–∏ —á—É–≤—Å—Ç–≤–∞. –°–µ–∫–æ—ò–∞ –µ–º–æ—Ü–∏—ò–∞ –µ –≤–∞–ª–∏–¥–Ω–∞ –∏ –Ω–∏–µ —Å–º–µ —Å–æ —Ç–µ–±–µ!                  </p>
                </div>
              </CardContent>
            </Card>
        )}
      </div>
  )
}
